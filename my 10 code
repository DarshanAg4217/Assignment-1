
#include<iostream>
#include<string>
//#define N 20
using namespace std;
string Q[10];
int Pr[10];
int r = -1,f = -1,n;
void enqueue(string data,int p)//Enqueue function to insert data and its priority in queue
{
	int i;
	if((f==0)&&(r==n-1)) //Check if Queue is full
		cout<<"Queue is full";
	else {
		if(f==-1) { //if Queue is empty
			f = r = 0;
			Q[r] = data;
			Pr[r] = p;

		}
		else {
			for(i = r;i>=f;i--)
 {
				if(p>Pr[i]) {
					Q[i+1] = Q[i];
					Pr[i+1] = Pr[i];	
				}
				else break;
			}
			Q[i+1] = data;
			Pr[i+1] = p;
			r++;
		}	
	}

}
void print() { //print the data of Queue
	int i;
	for(i=f;i<=r;i++) {
		cout << "Patient's Name - "<<Q[i];
		switch(Pr[i]) {
			case 1: 
				cout << " Priority - 'Checkup' " << endl;
			break;
			case 2:
				cout << " Priority - 'Non-serious' " << endl;
			break;
			case 3:
				cout << " Priority - 'Serious' " << endl;
			break;
			default:
				cout << "Priority not found" << endl;
		}
	}
}

void dequeue() { //remove the data from front
	if(f == -1) {
		cout<<"Queue is Empty";
	}	
	else {
	cout<<"deleted Element ="<<Q[f]<<endl;
	cout<<"Its Priority = "<<Pr[f]<<endl;
		if(f==r) f = r = -1;
		else f++;
	}
}

int main() {
	string data;
	int opt,i,p;
	cout<<"Enter Your Choice:-"<<endl;
	do {
	cout << "1 for Insert the Data in Queue" << endl << "2 for show the Data in Queue " << endl << "3 for Delete the data from the Queue" 
		<< endl << "0 for Exit"<< endl;
	cin >> opt;
		switch(opt) {
			case 1:
				cout << "Enter the number of patinent" << endl;
				cin >> n;
				i = 0;
			for(i=0;i<n;i++) 
			{
					cout << "Enter your name of the patient : ";
					cin >> data;
cout << "Enter your Prioritys (3: serious, 2: non-serious, 1: genral checkup) : ";
						cin >> p;
						enqueue(data,p);
						
				}
			break;
			case 2:
				print();
			break;
			case 3:
				 dequeue();
			break;
		}
	}while(opt!=0);
        return 0;
}

/*Data Structures: Arrays Q and Pr store patient names and their priorities. 
Variables r and f track the rear and front of the queue. n stores the maximum queue size.
enqueue(): Inserts patient data based on priority. Displays "Queue is full" if full.
print(): Displays patient names with their priority 
levels ('Checkup', 'Non-serious', or 'Serious').
dequeue(): Removes patient data from the front. Displays "Queue is Empty" if empty.
main(): Entry point. User chooses options: 1 for insert, 2 for display, 3 for delete, 0 for exit.
User Interaction: Asks for patientinfo (name and priority) and provides menu options until the user exits.*/
/*
©Initialize arrays Q[] and Pr[] 
  for patient names and priorities, 
  and variables r and f for rear and front to -1.

©Define functions:enqueue(string data, int p):
  Insert data and priority into the queue.print():
  Print patient data and priorities.dequeue(): 
  Remove data from the front of the queue.
  
©In enqueue:Check if the queue is full.
  If empty, set f and r to 0 and insert data.
  If not empty, shift elements based on
  priority to make space.
  
©In print:Iterate over the queue from front
    to rear and print data with priorities.
   
©In dequeue:Check if the queue is empty.If not,
    remove data from the front and update f.
    
©In main:Take user input for operations
     (insert, show, delete, or exit).
     Call respective functions based on input until exit. */